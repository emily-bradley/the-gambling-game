<p>The Gambling Game is composed of 3 classes: <code>Gamble</code>, <code>Bandit</code>, and <code>Agent</code>. During the game, a series of rounds are executed with <code>Gamble.execute_round()</code>. Each round, <code>Bandits</code> are available for <code>Agents</code> to select. Each <code>Bandit</code> has a pre-determined probability of dispensing a reward. The goal is for the <code>Agent</code> to employ a strategy that optimizes the amount of rewards received by the end of the game (when the rounds are exhausted).</p><ac:structured-macro ac:name="info">
<ac:rich-text-body><p>The only code you will need to edit/change the <code>Agent</code> code. A template is provided in agent_template.py</p></ac:rich-text-body>
</ac:structured-macro>
<h2>Bandits</h2>
<p>This is the Bandit class. A Bandit is a slot machine that has a chance to dispense a static reward amount. Bandits are called each round to return a reward based on their probability.</p><dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">bandit.Bandit</ac:parameter>
</ac:structured-macro><em>class </em><code>bandit.</code><strong><code>Bandit</code></strong>(<em><em>name</em></em>, <em><em>probability</em></em>, <em><em>reward_amount</em>=1000</em>)</dt>
<dd><p>A slot machine with a probability of returning a static reward.</p><p>Bandit is the object for gambling on in the Gambling Game. Each bandit has a unique name, which is typically numerical order.</p><table>
<tbody>
<tr>
<td style="border: none"><strong>Variables:</strong></td>
<td style="border: none"><ul>
<li>
<p><strong>name</strong> (<em>int</em>) – an identifier for the bandit; typically sequential order</p></li>
<li>
<p><strong>probability</strong> (<em>float</em>) – value between 0 and 1 that represents the probability of dispensing a reward</p></li>
<li>
<p><strong>reward_amount</strong> (<em>int</em>) – the amount rewarded in pull() based on probability, defaults to 1000</p></li>
</ul>
</td>
</tr>
</tbody>
</table>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">bandit.Bandit.pull</ac:parameter>
</ac:structured-macro><strong><code>pull</code></strong>()</dt>
<dd><p>Pull the bandit’s arm to try and win the hidden reward_amount. The bandit has a hidden probability of dispensing the reward_amount. Reward is discrete - pull() returns either a reward or 0.</p><table>
<tbody>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p><em>int</em> of 0 if random number is &gt; reward probability or reward_amount if probability is &lt; reward probability</p></td>
</tr>
</tbody>
</table>
</dd>
</dl>
</dd>
</dl>
<p><strong>Notes:</strong></p><p>The current class structure expects an <strong>int</strong> value for <code>reward_amount</code>. Future enhancements could return various ranges or distributions.</p><p><strong>Examples:</strong></p><ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> from bandit import Bandit
>>> always_reward_bandit = Bandit(name=1, probability=1)
>>> always_reward_bandit.pull()
1000
>>> never_reward_bandit = Bandit(name=2, probability=0)
>>> never_reward_bandit.pull()
0]]></ac:plain-text-body>
</ac:structured-macro>
<h2>Agents</h2>
<p>This is the Agent class. Agents compete in Gamble rounds. Gamble is a game, involving a set of Agents and a set of Bandits. Agents choose which bandit to pull each round, and are rewarded according to the reward probability of the selected Bandit. The Agent with the most rewards at the end of the game (when all rounds are complete) is the winner.</p><dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">agent.Agent</ac:parameter>
</ac:structured-macro><em>class </em><code>agent.</code><strong><code>Agent</code></strong>(<em><em>bandits</em></em>, <em><em>num_rounds</em></em>)</dt>
<dd><p>An agent does not know the number of other players (agents) Each Agent begins with a reward balance of 0 dollars. The objective is to finish the game with as high a balance as possible, or in other words, to minimize regret. Regret is the difference between all rewards possible in the game and the reward amount the agent received.</p><table>
<tbody>
<tr>
<td style="border: none"><strong>Variables:</strong></td>
<td style="border: none"><ul>
<li>
<p><strong>bandits</strong> (<em>list</em>) – list of bandit objects</p></li>
<li>
<p><strong>num_rounds</strong> (<em>int</em>) – number of rounds in the game</p></li>
</ul>
</td>
</tr>
</tbody>
</table>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">agent.Agent.action</ac:parameter>
</ac:structured-macro><em>abstract </em><strong><code>action</code></strong>()</dt>
<dd><p>The strategy the agent uses to take choose a bandit; Returns a bandit object.</p><table>
<tbody>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p><em>Bandit</em> choosen for this round</p></td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">agent.Agent.name</ac:parameter>
</ac:structured-macro><em>abstract property </em><strong><code>name</code></strong></dt>
<dd><p>The name of the agent instance. This string value is displayed in the competition leaderboard and graph</p><table>
<tbody>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p><em>string</em> that represents the name of the agent</p></td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">agent.Agent.update</ac:parameter>
</ac:structured-macro><em>abstract </em><strong><code>update</code></strong>(<em><em>bandit</em></em>, <em><em>reward</em></em>)</dt>
<dd><p>The method to update the agent’s strategy, given a selected bandit and the reward amount. The update method is called following the action method.</p></dd>
</dl>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">agent.ExampleAgent</ac:parameter>
</ac:structured-macro><em>class </em><code>agent.</code><strong><code>ExampleAgent</code></strong>(<em><em>bandits</em></em>, <em><em>num_rounds</em></em>)</dt>
<dd><p>A simple example that pulls the same arm every time, selected randomly at initialization</p></dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">agent.ExampleAgent2</ac:parameter>
</ac:structured-macro><em>class </em><code>agent.</code><strong><code>ExampleAgent2</code></strong>(<em><em>bandits</em></em>, <em><em>num_rounds</em></em>)</dt>
<dd><p>A simple example that pulls and arm at random</p></dd>
</dl>
<p><strong>Notes:</strong></p><p>You will need to implement your own <code>Agent</code> class, similar to the way in which <code>ExampleAgent</code> and <code>ExampleAgent2</code> were implemented.</p><p><strong>Examples:</strong></p><ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> from agent import ExampleAgent
>>> from bandit import Bandit
>>> always_reward_bandit1 = Bandit(name=1, probability=1)
>>> always_reward_bandit2 = Bandit(name=2, probability=1)
>>> bandits = [always_reward_bandit, always_reward_bandit2]
>>> my_static_agent = ExampleAgent(bandits=bandits, num_rounds=1000)
1000]]></ac:plain-text-body>
</ac:structured-macro>
<h2>Gamble</h2>
<p>This is the Gamble class. Gamble is a game, involving a set of Agents and a set of Bandits. Agents are rewarded each round, based on  the reward probability of the Bandit they select. The Agent with the most rewards at the end of the game (i.e. when all rounds are complete) is the winner.</p><dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">gamble.Gamble</ac:parameter>
</ac:structured-macro><em>class </em><code>gamble.</code><strong><code>Gamble</code></strong>(<em><em>bandits</em></em>, <em><em>agents</em></em>)</dt>
<dd><p>Gamble is a game that can be executed one round at a time. The end of the game is determined externally (when no more rounds are executed). All of the attributes for tracking performance are available within this class.</p><table>
<tbody>
<tr>
<td style="border: none"><strong>Variables:</strong></td>
<td style="border: none"><ul>
<li>
<p><strong>_bandits</strong> (<em>list</em>) – list of bandit objects available in the game</p></li>
<li>
<p><strong>_agents</strong> (<em>list</em>) – list of all agent objects participating in the game</p></li>
<li>
<p><strong>_agent_rewards</strong> (<em>dictionary</em>) – current rewards for each agent; initially 0</p></li>
<li>
<p><strong>_agent_rewards_over_time</strong> (<em>dictionary</em>) – rewards each round for plotting</p></li>
</ul>
</td>
</tr>
</tbody>
</table>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">gamble.Gamble.execute_round</ac:parameter>
</ac:structured-macro><strong><code>execute_round</code></strong>()</dt>
<dd><p>Play a round of the gambling game. Get rewards for all bandidt, call all agents to choose their bandit, update all agents with their respective rewards, and update game data.</p></dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">gamble.Gamble.plot_history</ac:parameter>
</ac:structured-macro><strong><code>plot_history</code></strong>()</dt>
<dd><p>Creates a visual representation of how the gambling game has progressed. Number of Rounds is on the x-axis and Total Agent Rewards for each agent is on the y-axis. Plots a matplotlib graph with each agent.name in the legend.</p></dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">gamble.Gamble.print_final_leaderboard</ac:parameter>
</ac:structured-macro><strong><code>print_final_leaderboard</code></strong>()</dt>
<dd><p>Prints the leaderboard of all agents based on their agent.name and total winnings. The leaderboard is sorted and identifies the winning agent.</p></dd>
</dl>
</dd>
</dl>
<p><strong>Notes:</strong></p><p>For the Gambling Game, <code>gamble</code> will be run from <em>run_game.py</em>.</p><p><strong>Examples:</strong></p><ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> from agent import ExampleAgent, ExampleAgent2
>>> from bandit import Bandit
>>> from gamble import Gamble
>>> num_rounds = 1000
>>> always_reward_bandit1 = Bandit(name=1, probability=1)
>>> always_reward_bandit2 = Bandit(name=2, probability=1)
>>> bandits = [always_reward_bandit, always_reward_bandit2]
>>> my_static_agent = ExampleAgent(bandits=bandits, num_rounds=num_rounds)
>>> my_random_agent = ExampleAgent2(bandits=bandits, num_rounds=num_rounds)
>>> agents = [my_static_agent, my_random_agent]
>>> gamble = Gamble(bandits=bandits, agents=agents)
>>>    for i in range(0, num_rounds):
>>>        gamble.execute_round()]]></ac:plain-text-body>
</ac:structured-macro>
