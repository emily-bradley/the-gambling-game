<h2>Run Game</h2>
<p>‘run_game’ is the program that runs the Bidding Game. ‘run_game’ has one function, ‘run_game’ that initializes the agents, initializes the bandits, creates the game, and executes each round of the game. A graph of reward accumulation over time is plotted at the end of the game.</p><dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">run_game.run_game</ac:parameter>
</ac:structured-macro><code>run_game.</code><strong><code>run_game</code></strong>()</dt>
<dd><p>Function that runs the Gambling Game. ‘run_game’ accept s3 command line arguments: ‘bandits’ (int) - the number of bandits to choose from ‘rounds’ (int) - the number of gambling rounds to execute ‘plot’ (bool) - an indicator that display the gamble history of the game</p></dd>
</dl>
<p><strong>Examples:</strong></p><ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> python run_game.py
Starting the Gambling Game...
Test your luck to see if you can win!
------
3 Bandits available
2 player(s) competing:
-> StaticSelectionAgent
-> RandomSelectionAgent
Let the games begin!
------
Leaderboard:
RandomSelectionAgent:  486000 dollars  (WINNER!)
StaticSelectionAgent:  104000 dollars
------
The game has ended.]]></ac:plain-text-body>
</ac:structured-macro>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> python run_game.py -b 10 -r 1000 -p True
Starting the Gambling Game...
Test your luck to see if you can win!
------
10 Bandits available
2 player(s) competing:
-> StaticSelectionAgent
-> RandomSelectionAgent
Let the games begin!
------
Leaderboard:
RandomSelectionAgent:  474000 dollars  (WINNER!)
StaticSelectionAgent:  393000 dollars
------
The game has ended.]]></ac:plain-text-body>
</ac:structured-macro>
<h2>How to Compete</h2>
<p>Copy the format in the <em>agent_template.py</em> file into the end of the <em>agent.py</em> file:</p><ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:parameter ac:name="linenumbers">false</ac:parameter>
<ac:plain-text-body><![CDATA[# TODO: name your agent class; Must be unique among other agents
class MyAgent(Agent):
    # TODO: name your agent; This will appear in the graph and leaderboard
    name = 'MyAgentName'
    """
    A simple description of your agent

    Authors:
    Contributors to this agent
    """

    def __init__(self, bandits, num_rounds):
        super().__init__(bandits, num_rounds)

    def action(self):
        # TODO: replace this random bandit selection with your algorithm
        bandit_choice = random.choice(self.bandits)
        # return a bandit object as the "arm" to pull
        return bandit_choice

    def update(self, bandit, reward):
        # TODO: update your algorithm using data about the reward for a given bandit
        return]]></ac:plain-text-body>
</ac:structured-macro>
<p>Follow the tasks in the <em>TODO</em> prompts, then create a Pull Request to the main branch</p>